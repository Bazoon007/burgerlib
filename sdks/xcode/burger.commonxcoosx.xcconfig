//
//  Copyright Rebecca Ann Heineman. All rights reserved.
//
// http://disanji.net/iOS_Doc/#documentation/DeveloperTools/Conceptual/XcodeBuildSystem/300-Build_Settings/bs_build_settings.html
// https://developer.apple.com/library/mac/documentation/DeveloperTools/Reference/XcodeBuildSettingRef/1-Build_Setting_Reference/build_setting_ref.html
//

//
// Object code suffixes
//

SUFFIX_Release = rel;
SUFFIX_Debug = dbg;
SUFFIX_Internal = int;
SUFFIX_Profile= pro;
SUFFIX = $(SUFFIX_$(CONFIGURATION));

IDESUFFIX_0300 = xc3;
IDESUFFIX_0400 = xc4;
IDESUFFIX_0500 = xc5;
IDESUFFIX_0600 = xc6;
IDESUFFIX = $(IDESUFFIX_$(XCODE_VERSION_MAJOR));

// Architectures

// Build for stock PowerPC and Intel for both 32 and 64 bit targets
ARCHS_0300 = i386 x86_64 ppc ppc64;
ARCHS_0400 = i386 x86_64;
ARCHS_0500 = i386 x86_64;
ARCHS_0600 = i386 x86_64;
ARCHS = $(ARCHS_$(XCODE_VERSION_MAJOR));

// Build active architecture

ONLY_ACTIVE_ARCH_Release = NO;
ONLY_ACTIVE_ARCH_Debug = YES;
ONLY_ACTIVE_ARCH_Internal = NO;
ONLY_ACTIVE_ARCH_Profile = YES;
ONLY_ACTIVE_ARCH = $(ONLY_ACTIVE_ARCH_$(CONFIGURATION));

// Minimum SDK is Mac OSX 10.5
SDKROOT_0300 = macosx10.5;
SDKROOT_0400 = macosx10.5;
SDKROOT_0500 = macosx10.8;
SDKROOT_0600 = macosx10.8;
SDKROOT = $(SDKROOT_$(XCODE_VERSION_MAJOR));

MACOSX_DEPLOYMENT_TARGET_0300 = 10.5
MACOSX_DEPLOYMENT_TARGET_0400 = 10.5
MACOSX_DEPLOYMENT_TARGET_0500 = 10.8
MACOSX_DEPLOYMENT_TARGET_0600 = 10.8
MACOSX_DEPLOYMENT_TARGET = $(MACOSX_DEPLOYMENT_TARGET_$(XCODE_VERSION_MAJOR))

// Build locations

// Location to store the executable files
// CONFIGURATION_BUILD_DIR = $(BUILD_DIR)/$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME);
CONFIGURATION_BUILD_DIR = $(SYMROOT)/$(PRODUCT_NAME)$(SUFFIX);

// Location to store the build files
// CONFIGURATION_TEMP_DIR = $(PROJECT_TEMP_DIR)/$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME);
CONFIGURATION_TEMP_DIR = $(SYMROOT)/$(PRODUCT_NAME)$(SUFFIX);

// All build data goes into a folder called temp next to the project
//SYMROOT = build;
SYMROOT = temp;

// Compiler defines
// GCC_PREPROCESSOR_DEFINITIONS =;
GCC_PREPROCESSOR_DEFINITIONS = $(GCC_PREPROCESSOR_DEFINITIONS_$(CONFIGURATION));
GCC_PREPROCESSOR_DEFINITIONS_Release = NDEBUG;
GCC_PREPROCESSOR_DEFINITIONS_Debug = _DEBUG;
GCC_PREPROCESSOR_DEFINITIONS_Internal = _DEBUG;
GCC_PREPROCESSOR_DEFINITIONS_Profile = NDEBUG;

// Optimization settings

GCC_OPTIMIZATION_LEVEL = $(GCC_OPTIMIZATION_LEVEL_$(CONFIGURATION));
GCC_OPTIMIZATION_LEVEL_Release = s;
GCC_OPTIMIZATION_LEVEL_Debug = 0;
GCC_OPTIMIZATION_LEVEL_Internal = s;
GCC_OPTIMIZATION_LEVEL_Profile = s;

//
// Proposed output file name
//

// PRODUCT_NAME = ;
PRODUCT_NAME = $(TARGET_NAME);

//
// Insert the build suffix
//

//EXECUTABLE_SUFFIX = $(SUFFIX).$EXECUTABLE_EXTENSION;

//
// Remove all dead code
//

DEAD_CODE_STRIPPING = YES;

//
// On powerpc, optimize for G4
//

//GCC_MODEL_TUNING = G4;
GCC_MODEL_TUNING = G4;

//
// Profile settings
//

GENERATE_PROFILING_CODE = $(GENERATE_PROFILING_CODE_$(CONFIGURATION));
GENERATE_PROFILING_CODE_Release = NO;
GENERATE_PROFILING_CODE_Debug = NO;
GENERATE_PROFILING_CODE_Internal = NO;
GENERATE_PROFILING_CODE_Profile = YES;

// Use LLVM GCC 4.2 to build everything (Default is GCC 4.0)
//GCC_VERSION = 4.0;
GCC_VERSION_0300 = com.apple.compilers.llvmgcc42;
GCC_VERSION_0400 = com.apple.compilers.llvmgcc42;
GCC_VERSION_0500 = com.apple.compilers.llvm.clang.1_0;
GCC_VERSION_0600 = com.apple.compilers.llvm.clang.1_0;
GCC_VERSION = $(GCC_VERSION_$(XCODE_VERSION_MAJOR))

// Dwarf debugging
//DEBUG_INFORMATION_FORMAT = ;
DEBUG_INFORMATION_FORMAT = $(DEBUG_INFORMATION_FORMAT_$(CONFIGURATION));
DEBUG_INFORMATION_FORMAT_Release = dwarf-with-dsym;
DEBUG_INFORMATION_FORMAT_Debug = dwarf;
DEBUG_INFORMATION_FORMAT_Internal = dwarf;
DEBUG_INFORMATION_FORMAT_Profile = dwarf;

// Mach-O executable
MACH_O_TYPE = mh_execute;

// Prebind my functions together
PREBINDING = YES;

// Where are my headers?
HEADER_SEARCH_PATHS = $(SDKS)/macosx/burgerbase $(SDKS)/macosx/burgerlib;
// Where are my libraries?
LIBRARY_SEARCH_PATHS = $(SDKS)/macosx/burgerbase $(SDKS)/macosx/burgerlib;

// Resource file search paths?
REZ_SEARCH_PATHS = $(SDKS)/macosx/burgerbase $(SDKS)/macosx/burgerlib;

// Use CodeWarrior inline assembly syntax
GCC_CW_ASM_SYNTAX = YES;

// Disable CPP Exceptions
GCC_ENABLE_CPP_EXCEPTIONS = NO;

// Disable CPP RTTI
GCC_ENABLE_CPP_RTTI = NO;

// Build everything as Objective C++
GCC_INPUT_FILETYPE = sourcecode.cpp.objcpp;

// Use the latest version of the Objective C++ dialect
GCC_C_LANGUAGE_STANDARD = gnu99;

// Don't emit code to make the static constructors thread safe
GCC_THREADSAFE_STATICS = NO;

// Only compatible with stabs, so disable it
GCC_ENABLE_SYMBOL_SEPARATION = NO;

// Warnings, be paranoid

CLANG_WARN_BOOL_CONVERSION = YES;
CLANG_WARN_CONSTANT_CONVERSION = YES;
CLANG_WARN_EMPTY_BODY = YES;
CLANG_WARN_ENUM_CONVERSION = YES;
CLANG_WARN_INT_CONVERSION = YES;
CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;

GCC_WARN_CHECK_SWITCH_STATEMENTS = YES;
//GCC_WARN_EFFECTIVE_CPLUSPLUS_VIOLATIONS = YES;
GCC_WARN_SHADOW = YES;
GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
GCC_WARN_ALLOW_INCOMPLETE_PROTOCOL = YES;
GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED = YES;
GCC_WARN_ABOUT_RETURN_TYPE = YES;
GCC_WARN_MISSING_PARENTHESES = YES;
GCC_WARN_ABOUT_MISSING_PROTOTYPES = YES;
//GCC_WARN_ABOUT_MISSING_NEWLINE = YES;
GCC_WARN_NON_VIRTUAL_DESTRUCTOR = YES;
GCC_WARN_HIDDEN_VIRTUAL_FUNCTIONS = YES;
//GCC_WARN_PEDANTIC = YES;
GCC_WARN_ABOUT_POINTER_SIGNEDNESS = YES;
GCC_WARN_PROTOTYPE_CONVERSION = YES;
GCC_WARN_TYPECHECK_CALLS_TO_PRINTF = YES;

//GCC_WARN_UNINITIALIZED_AUTOS = YES;
GCC_WARN_UNINITIALIZED_AUTOS_Release = YES;
GCC_WARN_UNINITIALIZED_AUTOS_Debug = NO;
GCC_WARN_UNINITIALIZED_AUTOS_Internal = YES;
GCC_WARN_UNINITIALIZED_AUTOS_Profile = YES;
GCC_WARN_UNINITIALIZED_AUTOS = $(GCC_WARN_UNINITIALIZED_AUTOS_$(CONFIGURATION));

GCC_WARN_UNDECLARED_SELECTOR = YES;
GCC_WARN_UNUSED_FUNCTION = YES;
GCC_WARN_UNUSED_LABEL = YES;
GCC_WARN_UNUSED_PARAMETER = YES;
GCC_WARN_UNUSED_VALUE = YES;
GCC_WARN_UNUSED_VARIABLE = YES;

