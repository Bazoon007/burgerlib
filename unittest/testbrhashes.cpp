/***************************************

	Unit tests for the Integer Math library

	Copyright (c) 1995-2015 by Rebecca Ann Heineman <becky@burgerbecky.com>

	It is released under an MIT Open Source license. Please see LICENSE
	for license details. Yes, you can use it in a
	commercial title without paying anything, just give me a credit.
	Please? It's not like I'm asking you for money!

***************************************/

#include "testbrhashes.h"
#include "common.h"
#include "brcrc32.h"
#include "brmd2.h"
#include "brmd4.h"
#include "brmd5.h"
#include "brsha1.h"
#include "brstringfunctions.h"
#include "brfixedpoint.h"
#include "brnumberstringhex.h"


struct CRC32Test_t {
	const char *m_pString;
	Word32 m_Hash;
};

//
// Test Crc32B
//

const CRC32Test_t CRC32BTestTable[] = {
	{ 
		"",
		0x00000000
	},
	{
		"a",
		0xe8b7be43
	},
	{
		"message digest",
		0x20159d7f
	},
	{
		"abcdefghijklmnopqrstuvwxyz",
		0x4c2750bd
	},
	{
		"0123456789ABCDEF",
		0x983c37b5
	},
	{
		"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
		0x1fc2e6d2
	},
	{
		"12345678901234567890123456789012345678901234567890123456789012345678901234567890",
		0x7ca94a72
	},
	{
		"Let me eat your brain!",
		0xc3fda0e7
	},
	{
		"Calculate the cyclic redundancy checksum polynomial of 32-bit lengths of the string.",
		0xdc5c5e4b
	},
	{
		"The quick brown fox jumps over the lazy dog",
		0x414fa339
	}
};

static Word TestCRC32B(void)
{
	Word uFailure = FALSE;
	const CRC32Test_t *pWork = CRC32BTestTable;
	WordPtr uCount = BURGER_ARRAYSIZE(CRC32BTestTable);
	do {
		Word32 uTester = Burger::CalcCRC32B(pWork->m_pString,Burger::StringLength(pWork->m_pString));
		Word uTest = (uTester != pWork->m_Hash);
		uFailure |= uTest;
		if (uTest) {
			ReportFailure("Burger::CalcCRC32B(%s) = 0x%08X, expected 0x%08X",uTest,pWork->m_pString,uTester,pWork->m_Hash);
		}
		++pWork;
	} while (--uCount);
	return uFailure;
}

struct MD2Test_t {
	const char *m_pString;
	Burger::MD2_t m_Hash;
};

//
// Test MD2
//

const MD2Test_t MD2TestTable[] = {
	{ 
		"",
		{{0x83,0x50,0xe5,0xa3,0xe2,0x4c,0x15,0x3d,0xf2,0x27,0x5c,0x9f,0x80,0x69,0x27,0x73}}
	},
	{
		"a",
		{{0x32,0xec,0x01,0xec,0x4a,0x6d,0xac,0x72,0xc0,0xab,0x96,0xfb,0x34,0xc0,0xb5,0xd1}}
	},
	{
		"message digest",
		{{0xab,0x4f,0x49,0x6b,0xfb,0x2a,0x53,0x0b,0x21,0x9f,0xf3,0x30,0x31,0xfe,0x06,0xb0}}
	},
	{
		"abcdefghijklmnopqrstuvwxyz",
		{{0x4e,0x8d,0xdf,0xf3,0x65,0x02,0x92,0xab,0x5a,0x41,0x08,0xc3,0xaa,0x47,0x94,0x0b}}
	},
	{
		"0123456789ABCDEF",
		{{0xc3,0x1d,0x79,0x45,0xaa,0xfb,0x1d,0x69,0x48,0x20,0xb7,0x1a,0xa7,0xea,0xe7,0x2b}}
	},
	{
		"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
		{{0xda,0x33,0xde,0xf2,0xa4,0x2d,0xf1,0x39,0x75,0x35,0x28,0x46,0xc3,0x03,0x38,0xcd}}
	},
	{
		"12345678901234567890123456789012345678901234567890123456789012345678901234567890",
		{{0xd5,0x97,0x6f,0x79,0xd8,0x3d,0x3a,0x0d,0xc9,0x80,0x6c,0x3c,0x66,0xf3,0xef,0xd8}}
	},
	{
		"Let me eat your brain!",
		{{0x1d,0x74,0x13,0x30,0xeb,0x8e,0x10,0xd5,0x88,0x7c,0x58,0x4c,0x85,0xe1,0x38,0xd3}}
	},
	{
		"Message-Digest 2 is a widely-used cryptographic hash function with a 128-bit hash value.",
		{{0xd2,0x93,0x7e,0x4a,0x1c,0x84,0xa5,0x16,0xa6,0x2b,0x12,0x88,0x36,0xf5,0xcd,0x8d}}
	},
	{
		"The quick brown fox jumps over the lazy dog",
		{{0x03,0xd8,0x5a,0x0d,0x62,0x9d,0x2c,0x44,0x2e,0x98,0x75,0x25,0x31,0x9f,0xc4,0x71}}
	}
};

static Word TestMD2(void)
{
	Word uFailure = FALSE;
	const MD2Test_t *pWork = MD2TestTable;
	WordPtr uCount = BURGER_ARRAYSIZE(MD2TestTable);
	do {
		Burger::MD2_t Tester;
		Burger::Hash(&Tester,pWork->m_pString,Burger::StringLength(pWork->m_pString));
		Word uTest = static_cast<Word>(Burger::MemoryCompare(Tester.m_Hash,pWork->m_Hash.m_Hash,sizeof(Tester)));
		uFailure |= uTest;
		if (uTest) {
			ReportFailure("Burger::Hash(MD2_t,%s) = 0x%02X%02X%02X%02X, expected 0x%02X%02X%02X%02X",uTest,pWork->m_pString,Tester.m_Hash[0],Tester.m_Hash[1],Tester.m_Hash[2],Tester.m_Hash[3],pWork->m_Hash.m_Hash[0],pWork->m_Hash.m_Hash[1],pWork->m_Hash.m_Hash[2],pWork->m_Hash.m_Hash[3]);
		}
		++pWork;
	} while (--uCount);
	return uFailure;
}

struct MD4Test_t {
	const char *m_pString;
	Burger::MD4_t m_Hash;
};

//
// Test MD4
//

const MD4Test_t MD4TestTable[] = {
	{
		"",
		{{0x31,0xd6,0xcf,0xe0,0xd1,0x6a,0xe9,0x31,0xb7,0x3c,0x59,0xd7,0xe0,0xc0,0x89,0xc0}}
	},
	{
		"a",
		{{0xbd,0xe5,0x2c,0xb3,0x1d,0xe3,0x3e,0x46,0x24,0x5e,0x05,0xfb,0xdb,0xd6,0xfb,0x24}}
	},
	{
		"message digest",
		{{0xd9,0x13,0x0a,0x81,0x64,0x54,0x9f,0xe8,0x18,0x87,0x48,0x06,0xe1,0xc7,0x01,0x4b}}
	},
	{
		"abcdefghijklmnopqrstuvwxyz",
		{{0xd7,0x9e,0x1c,0x30,0x8a,0xa5,0xbb,0xcd,0xee,0xa8,0xed,0x63,0xdf,0x41,0x2d,0xa9}}
	},
	{
		"0123456789ABCDEF",
		{{0x02,0x4b,0x50,0x28,0x7d,0x63,0xeb,0x62,0xdc,0x29,0xb4,0x7c,0x6a,0x9c,0xe0,0x03}}
	},
	{
		"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
		{{0x04,0x3f,0x85,0x82,0xf2,0x41,0xdb,0x35,0x1c,0xe6,0x27,0xe1,0x53,0xe7,0xf0,0xe4}}
	},
	{
		"12345678901234567890123456789012345678901234567890123456789012345678901234567890",
		{{0xe3,0x3b,0x4d,0xdc,0x9c,0x38,0xf2,0x19,0x9c,0x3e,0x7b,0x16,0x4f,0xcc,0x05,0x36}}
	},
	{
		"Let me eat your brain!",
		{{0xc8,0x5d,0x0c,0xa6,0x62,0xfa,0xc6,0x03,0xb0,0x72,0x17,0xa9,0xcf,0x95,0xb1,0x09}}
	},
	{
		"Message-Digest 4 is a widely-used cryptographic hash function with a 128-bit hash value.",
		{{0x07,0x03,0xb2,0x6c,0xb1,0x49,0x30,0x7e,0xcc,0x4e,0x7f,0x0a,0xbb,0x8c,0x3f,0xf6}}
	},
	{
		"The quick brown fox jumps over the lazy dog",
		{{0x1b,0xee,0x69,0xa4,0x6b,0xa8,0x11,0x18,0x5c,0x19,0x47,0x62,0xab,0xae,0xae,0x90}}
	}
};

static Word TestMD4(void)
{
	Word uFailure = FALSE;
	const MD4Test_t *pWork = MD4TestTable;
	WordPtr uCount = BURGER_ARRAYSIZE(MD4TestTable);
	do {
		Burger::MD4_t Tester;
		Burger::Hash(&Tester,(const Word8 *)pWork->m_pString,Burger::StringLength(pWork->m_pString));
		Word uTest = static_cast<Word>(Burger::MemoryCompare(Tester.m_Hash,pWork->m_Hash.m_Hash,sizeof(Tester)));
		uFailure |= uTest;
		if (uTest) {
			ReportFailure("Burger::Hash(MD4_t,%s) = 0x%02X%02X%02X%02X, expected 0x%02X%02X%02X%02X",uTest,pWork->m_pString,Tester.m_Hash[0],Tester.m_Hash[1],Tester.m_Hash[2],Tester.m_Hash[3],pWork->m_Hash.m_Hash[0],pWork->m_Hash.m_Hash[1],pWork->m_Hash.m_Hash[2],pWork->m_Hash.m_Hash[3]);
		}
		++pWork;
	} while (--uCount);
	return uFailure;
}

struct MD5Test_t {
	const char *m_pString;
	Burger::MD5_t m_Hash;
};

//
// Test MD5
//

const MD5Test_t MD5TestTable[] = {
	{
		"",
		{{0xd4,0x1d,0x8c,0xd9,0x8f,0x00,0xb2,0x04,0xe9,0x80,0x09,0x98,0xec,0xf8,0x42,0x7e}}
	},
	{
		"a",
		{{0x0c,0xc1,0x75,0xb9,0xc0,0xf1,0xb6,0xa8,0x31,0xc3,0x99,0xe2,0x69,0x77,0x26,0x61}}
	},
	{
		"message digest",
		{{0xf9,0x6b,0x69,0x7d,0x7c,0xb7,0x93,0x8d,0x52,0x5a,0x2f,0x31,0xaa,0xf1,0x61,0xd0}}
	},
	{
		"abcdefghijklmnopqrstuvwxyz",
		{{0xc3,0xfc,0xd3,0xd7,0x61,0x92,0xe4,0x00,0x7d,0xfb,0x49,0x6c,0xca,0x67,0xe1,0x3b}}
	},
	{
		"0123456789ABCDEF",
		{{0xe4,0x3d,0xf9,0xb5,0xa4,0x6b,0x75,0x5e,0xa8,0xf1,0xb4,0xdd,0x08,0x26,0x55,0x44}}
	},
	{
		"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
		{{0xd1,0x74,0xab,0x98,0xd2,0x77,0xd9,0xf5,0xa5,0x61,0x1c,0x2c,0x9f,0x41,0x9d,0x9f}}
	},
	{
		"12345678901234567890123456789012345678901234567890123456789012345678901234567890",
		{{0x57,0xed,0xf4,0xa2,0x2b,0xe3,0xc9,0x55,0xac,0x49,0xda,0x2e,0x21,0x07,0xb6,0x7a}}
	},
	{
		"Let me eat your brain!",
		{{0x41,0x79,0xe1,0x05,0xc2,0xda,0x8a,0xf8,0xf6,0x97,0x30,0x5d,0x55,0xd1,0xf4,0x00}}
	},
	{
		"Message-Digest 5 is a widely-used cryptographic hash function with a 128-bit hash value.",
		{{0x16,0x39,0xc8,0x69,0x9c,0xb7,0x77,0xe4,0xb5,0x55,0x07,0xd6,0x03,0xa9,0x09,0x6f}}
	},
	{
		"The quick brown fox jumps over the lazy dog",
		{{0x9e,0x10,0x7d,0x9d,0x37,0x2b,0xb6,0x82,0x6b,0xd8,0x1d,0x35,0x42,0xa4,0x19,0xd6}}
	}
};

static Word TestMD5(void)
{
	Word uFailure = FALSE;
	const MD5Test_t *pWork = MD5TestTable;
	WordPtr uCount = BURGER_ARRAYSIZE(MD5TestTable);
	do {
		Burger::MD5_t Tester;
		Burger::Hash(&Tester,(const Word8 *)pWork->m_pString,Burger::StringLength(pWork->m_pString));
		Word uTest = static_cast<Word>(Burger::MemoryCompare(Tester.m_Hash,pWork->m_Hash.m_Hash,sizeof(Tester)));
		uFailure |= uTest;
		if (uTest) {
			ReportFailure("Burger::Hash(MD5_t,%s) = 0x%02X%02X%02X%02X, expected 0x%02X%02X%02X%02X",uTest,pWork->m_pString,Tester.m_Hash[0],Tester.m_Hash[1],Tester.m_Hash[2],Tester.m_Hash[3],pWork->m_Hash.m_Hash[0],pWork->m_Hash.m_Hash[1],pWork->m_Hash.m_Hash[2],pWork->m_Hash.m_Hash[3]);
		}
		++pWork;
	} while (--uCount);
	return uFailure;
}

struct SHA1Test_t {
	const char *m_pString;
	Burger::SHA1_t m_Hash;
};

//
// Test MD5
//

const SHA1Test_t SHA1TestTable[] = {
	{
		"",
		{{0xda,0x39,0xa3,0xee,0x5e,0x6b,0x4b,0x0d,0x32,0x55,0xbf,0xef,0x95,0x60,0x18,0x90,0xaf,0xd8,0x07,0x09}}
	},
	{
		"a",
		{{0x86,0xf7,0xe4,0x37,0xfa,0xa5,0xa7,0xfc,0xe1,0x5d,0x1d,0xdc,0xb9,0xea,0xea,0xea,0x37,0x76,0x67,0xb8}}
	},
	{
		"message digest",
		{{0xc1,0x22,0x52,0xce,0xda,0x8b,0xe8,0x99,0x4d,0x5f,0xa0,0x29,0x0a,0x47,0x23,0x1c,0x1d,0x16,0xaa,0xe3}}
	},
	{
		"abcdefghijklmnopqrstuvwxyz",
		{{0x32,0xd1,0x0c,0x7b,0x8c,0xf9,0x65,0x70,0xca,0x04,0xce,0x37,0xf2,0xa1,0x9d,0x84,0x24,0x0d,0x3a,0x89}}
	},
	{
		"0123456789ABCDEF",
		{{0xce,0x27,0xcb,0x14,0x10,0x98,0xfe,0xb0,0x07,0x14,0xe7,0x58,0x64,0x6b,0xe3,0xe9,0x9c,0x18,0x5b,0x71}}
	},
	{
		"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
		{{0x76,0x1c,0x45,0x7b,0xf7,0x3b,0x14,0xd2,0x7e,0x9e,0x92,0x65,0xc4,0x6f,0x4b,0x4d,0xda,0x11,0xf9,0x40}}
	},
	{
		"12345678901234567890123456789012345678901234567890123456789012345678901234567890",
		{{0x50,0xab,0xf5,0x70,0x6a,0x15,0x09,0x90,0xa0,0x8b,0x2c,0x5e,0xa4,0x0f,0xa0,0xe5,0x85,0x55,0x47,0x32}}
	},
	{
		"Let me eat your brain!",
		{{0xba,0x67,0x08,0x33,0xd0,0xc5,0x5a,0xaf,0xb4,0xc7,0x9d,0x09,0xec,0xd3,0x49,0x72,0x08,0x54,0x75,0x02}}
	},
	{
		"The SHA produces a 160-bit representation of the message called the MessageDigest.",
		{{0x42,0xd7,0x7a,0xaf,0x69,0xfa,0x28,0x38,0x75,0x0e,0x93,0x4d,0x59,0x7e,0x92,0x2d,0x61,0xc9,0x53,0xfe}}
	},
	{
		"The quick brown fox jumps over the lazy dog",
		{{0x2f,0xd4,0xe1,0xc6,0x7a,0x2d,0x28,0xfc,0xed,0x84,0x9e,0xe1,0xbb,0x76,0xe7,0x39,0x1b,0x93,0xeb,0x12}}
	}
};

static Word TestSHA1(void)
{
	Word uFailure = FALSE;
	const SHA1Test_t *pWork = SHA1TestTable;
	WordPtr uCount = BURGER_ARRAYSIZE(SHA1TestTable);
	do {
		Burger::SHA1_t Tester;
		Burger::Hash(&Tester,(const Word8 *)pWork->m_pString,Burger::StringLength(pWork->m_pString));
		Word uTest = static_cast<Word>(Burger::MemoryCompare(Tester.m_Hash,pWork->m_Hash.m_Hash,sizeof(Tester)));
		uFailure |= uTest;
		if (uTest) {
			ReportFailure("Burger::Hash(SHA1_t,%s) = 0x%02X%02X%02X%02X, expected 0x%02X%02X%02X%02X",uTest,pWork->m_pString,Tester.m_Hash[0],Tester.m_Hash[1],Tester.m_Hash[2],Tester.m_Hash[3],pWork->m_Hash.m_Hash[0],pWork->m_Hash.m_Hash[1],pWork->m_Hash.m_Hash[2],pWork->m_Hash.m_Hash[3]);
		}
		++pWork;
	} while (--uCount);
	return uFailure;
}

//
// Test hash code
//

int BURGER_API TestBrhashes(void)
{
	Message("Running Hashing tests");

	Word uResult = TestCRC32B();
	uResult |= TestMD2();
	uResult |= TestMD4();
	uResult |= TestMD5();
	uResult |= TestSHA1();
	return static_cast<int>(uResult);
}
